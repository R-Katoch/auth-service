const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const pool = require('../config/pg');
const logger = require('../utils/logger'); // Assuming a logger is set up
require('dotenv').config();

class AuthService {
    JWT_SECRET: string;
    REFRESH_SECRET: string;
    constructor() {
        if (!process.env.JWT_SECRET || !process.env.REFRESH_SECRET) {
            throw new Error("Missing JWT secrets in environment variables.");
        }
        this.JWT_SECRET = process.env.JWT_SECRET;
        this.REFRESH_SECRET = process.env.REFRESH_SECRET;
    }

    // Fetch user by email, username, or phone number
    async getUserByIdentifier(userIdentifier) {
        try {
            let userQuery = 'SELECT * FROM users WHERE email = $1 OR username = $1';
            let params = [userIdentifier];

            if (!userIdentifier.includes('@') && !userIdentifier.match(/^[a-zA-Z0-9]+$/)) {
                userQuery = 'SELECT * FROM users WHERE phone_number = $1';
            }

            const result = await pool.query(userQuery, params);
            if (result.rows.length === 0) {
                return null; // Do not reveal user existence
            }

            if (userQuery.includes('phone_number') && result.rows.length > 1) {
                throw new Error('Multiple accounts found with this phone number. Use email or username.');
            }

            return result.rows[0];
        } catch (err) {
            logger.error(`Error fetching user: ${err.message}`);
            throw new Error('Error fetching user data');
        }
    }

    // Validate password strength
    validatePassword(password) {
        const regex = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d!@#$%^&*()_+]{8,}$/;
        if (!regex.test(password)) {
            throw new Error('Password must be at least 8 characters long and contain both letters and numbers.');
        }
    }

    // Validate username format
    validateUsername(username) {
        const regex = /^[a-zA-Z0-9_]{3,20}$/;
        if (!regex.test(username)) {
            throw new Error('Username must be 3-20 characters long and contain only letters, numbers, or underscores.');
        }
    }

    // Validate phone number format
    validatePhoneNumber(phoneNumber) {
        const phoneRegex = /^\d{10,15}$/;
        if (!phoneRegex.test(phoneNumber)) {
            throw new Error('Invalid phone number format');
        }
    }

    // Register a new user
    async registerUser(username, password, email, phoneNumber, role = 'user') {
        const client = await pool.connect();
        try {
            this.validatePassword(password);
            this.validateUsername(username);
            this.validatePhoneNumber(phoneNumber);

            await client.query('BEGIN');

            // Check for existing email or username
            const emailCheck = await client.query('SELECT id FROM users WHERE email = $1', [email]);
            if (emailCheck.rows.length > 0) throw new Error('Email already in use');

            const usernameCheck = await client.query('SELECT id FROM users WHERE username = $1', [username]);
            if (usernameCheck.rows.length > 0) throw new Error('Username already in use');

            const hashedPassword = await bcrypt.hash(password, 12);

            const result = await client.query(
                'INSERT INTO users (username, password, email, phone_number, role) VALUES ($1, $2, $3, $4, $5) RETURNING id, username, email, phone_number, role',
                [username, hashedPassword, email, phoneNumber, role]
            );

            await client.query('COMMIT');
            return result.rows[0];
        } catch (err) {
            await client.query('ROLLBACK');
            logger.error(`User registration error: ${err.message}`);
            throw new Error('Registration failed');
        } finally {
            client.release();
        }
    }

    // Login user
    async loginUser(userIdentifier, password) {
        try {
            const user = await this.getUserByIdentifier(userIdentifier);
            if (!user) throw new Error('Invalid credentials');

            const passwordMatch = await bcrypt.compare(password, user.password);
            if (!passwordMatch) throw new Error('Invalid credentials');

            return this.generateTokens(user.id, user.role);
        } catch (err) {
            logger.warn(`Login attempt failed: ${err.message}`);
            throw new Error('Login failed');
        }
    }

    // Generate JWT and Refresh Token
    generateTokens(userId, role) {
        const token = jwt.sign({ id: userId, role }, this.JWT_SECRET, { expiresIn: '1h' });
        const refreshToken = jwt.sign({ id: userId }, this.REFRESH_SECRET, { expiresIn: '7d' });

        return { token, refreshToken };
    }

    // Forgot Password: Generate reset token
    async forgotPassword(userIdentifier) {
        try {
            const user = await this.getUserByIdentifier(userIdentifier);
            if (!user) return { message: 'If user exists, a reset link has been sent' };

            const resetToken = jwt.sign({ id: user.id }, this.JWT_SECRET, { expiresIn: '15m' });

            // Here you would send an email with the resetToken (use a queue like BullMQ)
            logger.info(`Password reset token generated for user ID: ${user.id}`);
            return { message: 'If user exists, a reset link has been sent' };
        } catch (err) {
            logger.error(`Forgot password error: ${err.message}`);
            throw new Error('Unable to process request');
        }
    }

    // Resend verification email
    async resendVerificationToken(userIdentifier) {
        try {
            const user = await this.getUserByIdentifier(userIdentifier);
            if (!user) return { message: 'If user exists, a verification email has been sent' };

            const verificationToken = jwt.sign({ id: user.id }, this.JWT_SECRET, { expiresIn: '1h' });

            // Send email logic here
            logger.info(`Verification token generated for user ID: ${user.id}`);
            return { message: 'If user exists, a verification email has been sent' };
        } catch (err) {
            logger.error(`Resend verification error: ${err.message}`);
            throw new Error('Unable to process request');
        }
    }

    // Refresh Token Flow
    async refreshAccessToken(refreshToken) {
        try {
            const decoded = jwt.verify(refreshToken, this.REFRESH_SECRET);
            return this.generateTokens(decoded.id, decoded.role);
        } catch (err) {
            logger.warn(`Invalid refresh token attempt: ${err.message}`);
            throw new Error('Invalid refresh token');
        }
    }

    // Verify JWT Token
    verifyToken(token) {
        try {
            return jwt.verify(token, this.JWT_SECRET);
        } catch (err) {
            return null;
        }
    }
}

module.exports = new AuthService();
